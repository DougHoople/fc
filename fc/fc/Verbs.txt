using System;
using System.Text.RegularExpressions;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;


namespace fc
{
    public enum Person
    {
        firstPersonSingular,
        //secondPersonSingular, // fixup irregular structure before adding in 
        thirdPersonSingular,
        firstPersonPlural,
        //secondPersonPlural,   // fixup irregular structure before adding in 
        thirdPersonPlural
    }
    enum Conjugation
    {
        Present,
        Preterite,
        Imperfect,
        Future,
        Conditional
    }

    public struct History
    {
        int index;
        PersonalPronoun pronoun;
        public History(int index, PersonalPronoun pronoun)
        {
            this.index = index; 
            this.pronoun = pronoun;
        }
        public static bool isInHistory(int index, PersonalPronoun pronoun, List<History> historyList)
        {
            if (index < 0 && pronoun == null)
                return false;

            foreach (History h in historyList)
            {
                if (h.pronoun == pronoun && h.index == index)
                    return true;
            }
            return false; 
        }
    }
    
    public class PersonalPronoun
    {
        public string pronoun;
        public Person person;

        public PersonalPronoun(string pronoun, Person person)
        {
            this.pronoun = pronoun;
            this.person = person;
        }
        public override string ToString()
        {
            return this.pronoun;
        }
    }


    class PersonalPronouns
    {
        private List<PersonalPronoun> m_pronounList;
        private Random m_random;

        public PersonalPronouns()
        {
            m_pronounList = new List<PersonalPronoun>();
            m_random = new Random();

            m_pronounList.Add(new PersonalPronoun("eu", Person.firstPersonSingular));
            m_pronounList.Add(new PersonalPronoun("você", Person.thirdPersonSingular));
            m_pronounList.Add(new PersonalPronoun("ele", Person.thirdPersonSingular));
            m_pronounList.Add(new PersonalPronoun("ela", Person.thirdPersonSingular));
            m_pronounList.Add(new PersonalPronoun("a gente", Person.thirdPersonSingular));
            m_pronounList.Add(new PersonalPronoun("nós", Person.firstPersonPlural));
            m_pronounList.Add(new PersonalPronoun("eles", Person.thirdPersonPlural));
            m_pronounList.Add(new PersonalPronoun("elas", Person.thirdPersonPlural));
            m_pronounList.Add(new PersonalPronoun("vocês", Person.thirdPersonPlural));
        }

        public PersonalPronoun getRandomPersonalPronoun()
        {
#if (compileunwanted)
            private Random rand = new Random(); 
            public T RandomEnum<T>() 
            { 
                T[] values = (T[])Enum.GetValues(typeof(T)); 
                return values[rand.Next(0, values.Length)]; 
            } 
#endif
            Person[] v = (Person[])Enum.GetValues(typeof(Person));
            // override for filtering
            // v = new Person[] { Person.firstPersonSingular, Person.thirdPersonSingular };
            Person rp = v[m_random.Next(0, v.Length)];
            List<PersonalPronoun> pList = this.m_pronounList.FindAll(o => o.person == rp);
            PersonalPronoun pp = pList[m_random.Next(0, pList.Count)];

            return pp;
        }
        public PersonalPronoun getRandomPersonalPronoun(Person p)
        {

            List<PersonalPronoun> pList = this.m_pronounList.FindAll(o => o.person == p);
            PersonalPronoun pp = pList[m_random.Next(0, pList.Count)];

            return pp;
        }

    }
    class IrregularConjugation
    {
        public Person m_person;
        public string m_conjugatedVerb;

        public IrregularConjugation(Person p, string conjugatedVerb)
        {
            m_conjugatedVerb = conjugatedVerb;
            m_person = p;
        }
    }

    class IrregularVerb
    {
        public string m_infinitive;
        public List<IrregularConjugation> m_conjugations;
        public IrregularVerb(string infinitive, string[] conjugations)
        {
            m_conjugations = new List<IrregularConjugation>();
            m_infinitive = infinitive;
            m_conjugations.Add(new IrregularConjugation(Person.firstPersonSingular, conjugations[(int)Person.firstPersonSingular]));
            m_conjugations.Add(new IrregularConjugation(Person.thirdPersonSingular, conjugations[(int)Person.thirdPersonSingular]));
            m_conjugations.Add(new IrregularConjugation(Person.firstPersonPlural, conjugations[(int)Person.firstPersonPlural]));
            m_conjugations.Add(new IrregularConjugation(Person.thirdPersonPlural, conjugations[(int)Person.thirdPersonPlural]));
        }
    }

    class Endings
    {
        public char letter;
        public string[] endings;
        public Endings(char letter, string[] endings)
        {
            this.letter = letter;
            this.endings = endings;
        }
    }

    class Tense
    {
        public Conjugation conjugation;
        public List<Endings> endings;
        public List<IrregularVerb> irregularVerbs;
        public Tense(Conjugation conjugation, Endings[] endings)
        {
            this.endings = new List<Endings>();
            this.irregularVerbs = new List<IrregularVerb>();
            this.conjugation = conjugation;
            foreach (Endings e in endings)
            {
                this.endings.Add(e);
            }
        }
        public void addIrregularVerb(IrregularVerb iv)
        {
            irregularVerbs.Add(iv);
        }
    }

    class Verbs
    {
        static PersonalPronouns personalPronouns;
        static List<string> infinitives = new List<string>();
        static List<string> sentences = new List<string>();
        static string basedir = @"C:\0junk\fc\fc\";
        static List<Tense> Tenses;

        static List<string> readSeedData()
        {
            List<string> fileStrings = new List<string>();
            StreamReader SR;
            string S;
            string ending;

            SR = File.OpenText(basedir + @"infinitives.txt");
            while ((S = SR.ReadLine()) != null)
            {
                if (S.IndexOf(@"//") != -1)
                {
                    // double-slash anywhere in the line means skip the whole line (for now) 
                    continue;
                }
                S = S.Trim();
                if (S.Length < 3 && S != "ir")
                {
                    Console.WriteLine("skipping " + S + " on loading from file");
                    continue;
                }

                ending = S.Substring(S.Length - 2);

                if (ending != "ar" && ending != "er" && ending != "ir" && S != "pôr")
                {
                    Console.WriteLine("skipping " + S);
                    continue;
                }
                fileStrings.Add(S);
            }
            SR.Close();
            return fileStrings;
        }
        static List<string> readSentences()
        {
            List<string> fileStrings = new List<string>();

            string s = "";
            using (StreamReader rdr = File.OpenText(basedir + @"sentences.txt"))
            {
                s = rdr.ReadToEnd();
            }

            string trim = Regex.Replace(s, @"[\r\t\n]", "");
            trim = Regex.Replace(trim, @"  ", " ");
            string[] sentences = trim.Split(new char[2] { '.', '?' });

            foreach (string tok in sentences)
                fileStrings.Add(tok);

            return fileStrings;
        }

        static PersonalPronoun getPersonalPronoun()
        {
            PersonalPronoun p = personalPronouns.getRandomPersonalPronoun();
            return p;
        }

        static string orthoChanging2(string infinitive, string ending)
        {
            // The purpose of this class of changes is to retain the sound of the 
            // consonant at the end of the stem. Applied across the board. 
            // If it's hard, it's supposed to stay hard. 
            // If it's soft, it's supposed to stay soft. 
            // Good lesson in pronunciation here! 

            string oldStem = infinitive.Substring(0, infinitive.Length - 2);
            string newStem = oldStem;
            if (infinitive.Length < 3)
                return newStem;

            if (infinitive.Substring(infinitive.Length - 3) == "car")
            {
                if (ending[0] == 'e' || ending[0] == 'i')
                {
                    newStem = newStem.Substring(0, newStem.Length - 1) + "qu";
                }
            }
            if (infinitive.Substring(infinitive.Length - 3) == "çar")
            {
                if (ending[0] == 'e' || ending[0] == 'i')
                {
                    newStem = newStem.Substring(0, newStem.Length - 1) + "c";
                }
            }
            if (infinitive.Substring(infinitive.Length - 3) == "gar")
            {
                if (ending[0] == 'e' || ending[0] == 'i')
                {
                    newStem = newStem.Substring(0, newStem.Length - 1) + "gu";
                }
            }
            if (infinitive.Substring(infinitive.Length - 3) == "cer")
            {
                if (ending[0] == 'a' || ending[0] == 'o')
                {
                    newStem = newStem.Substring(0, newStem.Length - 1) + "ç";
                }
            }
            if (infinitive.Substring(infinitive.Length - 3) == "ger" || infinitive.Substring(infinitive.Length - 3) == "ger")
            {
                if (ending[0] == 'a' || ending[0] == 'o')
                {
                    newStem = newStem.Substring(0, newStem.Length - 1) + "j";
                }
            }
            if (infinitive.Length > 3)
            {
                if (infinitive.Substring(infinitive.Length - 4) == "guer" || infinitive.Substring(infinitive.Length - 4) == "guir")
                {
                    if (ending[0] == 'a' || ending[0] == 'o')
                    {
                        newStem = newStem.Substring(0, newStem.Length - 1); // knock off the trailing 'u'
                    }
                }
            }
            if (oldStem != newStem)
                newStem = "*** " + newStem;
            return newStem;
        }

        static string conjugateIrregularVerb(string infinitive, PersonalPronoun pronoun, Conjugation conjugation)
        {
            string conjugatedVerb = null;
            Tense tense = Tenses.Find(o => o.conjugation == conjugation);
            List<IrregularVerb> irregularVerbs = tense.irregularVerbs;
            // not guaranteed to find
            IrregularVerb v = irregularVerbs.Find(o => o.m_infinitive == infinitive);
            if (v != null)
            {
                // guaranteed to find
                IrregularConjugation c = v.m_conjugations.Find(o => o.m_person == pronoun.person);
                conjugatedVerb = c.m_conjugatedVerb;
            }
            return conjugatedVerb;
        }

        static string conjugateRegularVerb(string infinitive, PersonalPronoun pronoun, Conjugation conjugation)
        {
            char ending = infinitive[infinitive.Length - 2];
            string stem = infinitive.Substring(0, infinitive.Length - 2);
            string conjugatedEnding = null;
            string conjugatedVerb;

            Tense t = Tenses.Find(o => o.conjugation == conjugation);
            Endings e = t.endings.Find(o => o.letter == ending);
            string[] endings = e.endings;

            switch (pronoun.person)
            {
                case Person.firstPersonSingular:
                    conjugatedEnding = endings[0];
                    break;
                case Person.thirdPersonSingular:
                    conjugatedEnding = endings[1];
                    break;
                case Person.firstPersonPlural:
                    conjugatedEnding = endings[2];
                    break;
                case Person.thirdPersonPlural:
                    conjugatedEnding = endings[3];
                    break;
            }

            string newStem = orthoChanging2(infinitive, conjugatedEnding);

            conjugatedVerb = newStem + conjugatedEnding;
            return conjugatedVerb;

        }


        static string conjugateVerb(string infinitive, PersonalPronoun pronoun, Conjugation conjugation)
        {
            string conjugatedVerb = null;

            if (isIrregular(infinitive, conjugation))
                conjugatedVerb = conjugateIrregularVerb(infinitive, pronoun, conjugation);
            else
                conjugatedVerb = conjugateRegularVerb(infinitive, pronoun, conjugation);

            return conjugatedVerb;
        }

        static bool isIrregular(string infinitive, Conjugation conjugation)
        {
            Tense t;
            IrregularVerb iv;
            t = Tenses.Find(o => o.conjugation == conjugation);
            if (t != null)
            {
                iv = t.irregularVerbs.Find(o => o.m_infinitive == infinitive);
                if (iv != null)
                    return true;
            }
            return false;
        }

        static public void StaticConstructor()
        {
            personalPronouns = new PersonalPronouns();
            Tenses = new List<Tense>();

            Endings[] e = new Endings[3];
            Tense t;

            // Conjugation.Present
            e[0] = new Endings('a', new string[] { "o", "a", "amos", "am" });
            e[1] = new Endings('e', new string[] { "o", "e", "emos", "em" });
            e[2] = new Endings('i', new string[] { "o", "e", "imos", "em" });
            t = new Tense(Conjugation.Present, e);
            Tenses.Add(t);
            t.addIrregularVerb(new IrregularVerb("dar", new string[] { "dou", "dá", "damos", "dão" }));
            t.addIrregularVerb(new IrregularVerb("dizer", new string[] { "digo", "diz", "dizemos", "dizem" }));
            t.addIrregularVerb(new IrregularVerb("estar", new string[] { "estou", "está", "estamos", "estão" }));
            t.addIrregularVerb(new IrregularVerb("fazer", new string[] { "faço", "faz", "fazemos", "fazem" }));
            t.addIrregularVerb(new IrregularVerb("haver", new string[] { "hei", "há", "havemos", "hão" }));
            t.addIrregularVerb(new IrregularVerb("ir", new string[] { "vou", "vai", "vamos", "vão" }));
            t.addIrregularVerb(new IrregularVerb("poder", new string[] { "posso", "pode", "podemos", "podem" }));
            t.addIrregularVerb(new IrregularVerb("pôr", new string[] { "ponho", "pões", "pomos", "põem" }));
            t.addIrregularVerb(new IrregularVerb("querer", new string[] { "quero", "quer", "queremos", "querem" }));
            t.addIrregularVerb(new IrregularVerb("saber", new string[] { "sei", "sabe", "sabemos", "sabem" }));
            t.addIrregularVerb(new IrregularVerb("ser", new string[] { "sou", "é", "somos", "são" }));
            t.addIrregularVerb(new IrregularVerb("ter", new string[] { "tenho", "tem", "temos", "têm" }));
            t.addIrregularVerb(new IrregularVerb("trazer", new string[] { "trago", "traz", "trazemos", "trazem" }));
            t.addIrregularVerb(new IrregularVerb("ver", new string[] { "vejo", "vê", "vemos", "vêem" }));
            t.addIrregularVerb(new IrregularVerb("vir", new string[] { "venho", "vem", "vimos", "vêm" }));

            t.addIrregularVerb(new IrregularVerb("crer", new string[] { "creio", "crê", "cremos", "crêem" }));
            t.addIrregularVerb(new IrregularVerb("ler", new string[] { "leio", "lê", "lemos", "lêem" }));
            t.addIrregularVerb(new IrregularVerb("medir", new string[] { "meço", "mede", "medimos", "medem" }));
            t.addIrregularVerb(new IrregularVerb("ouvir", new string[] { "ouço", "ouve", "ouvimos", "ouvem" }));
            t.addIrregularVerb(new IrregularVerb("pedir", new string[] { "peço", "pede", "pedimos", "pedem" }));
            t.addIrregularVerb(new IrregularVerb("perder", new string[] { "perco", "perde", "perdemos", "perdem" }));
            t.addIrregularVerb(new IrregularVerb("rir", new string[] { "rio", "ri", "rimos", "riem" }));
            t.addIrregularVerb(new IrregularVerb("valer", new string[] { "valho", "vale", "valemos", "valem" }));

            // Conjugation.Preterite
            e[0] = new Endings('a', new string[] { "ei", "ou", "amos", "aram" });
            e[1] = new Endings('e', new string[] { "i", "eu", "emos", "eram" });
            e[2] = new Endings('i', new string[] { "i", "iu", "imos", "iram" });
            t = new Tense(Conjugation.Preterite, e);
            Tenses.Add(t);
            t.addIrregularVerb(new IrregularVerb("dar", new string[] { "dei", "deu", "demos", "deram" }));
            t.addIrregularVerb(new IrregularVerb("dizer", new string[] { "disse", "disse", "dissemos", "disseram" }));
            t.addIrregularVerb(new IrregularVerb("estar", new string[] { "estive", "esteve", "estivemos", "estiveram" }));
            t.addIrregularVerb(new IrregularVerb("fazer", new string[] { "fiz", "fez", "fizemos", "fizeram" }));
            t.addIrregularVerb(new IrregularVerb("haver", new string[] { "houve", "houve", "houvemos", "houveram" }));
            t.addIrregularVerb(new IrregularVerb("ir", new string[] { "fui", "foi", "fomos", "foram" }));
            t.addIrregularVerb(new IrregularVerb("poder", new string[] { "pude", "pôde", "pudemos", "puderam" }));
            t.addIrregularVerb(new IrregularVerb("pôr", new string[] { "pus", "pôs", "pusemos", "puseram" }));
            t.addIrregularVerb(new IrregularVerb("querer", new string[] { "quis", "quis", "quisemos", "quiseram" }));
            t.addIrregularVerb(new IrregularVerb("saber", new string[] { "soube", "soube", "soubemos", "souberam" }));
            t.addIrregularVerb(new IrregularVerb("ser", new string[] { "fui", "foi", "fomos", "foram" }));
            t.addIrregularVerb(new IrregularVerb("ter", new string[] { "tive", "teve", "tivemos", "tiveram" }));
            t.addIrregularVerb(new IrregularVerb("trazer", new string[] { "trouxe", "trouxe", "trouxemos", "trouxeram" }));
            t.addIrregularVerb(new IrregularVerb("ver", new string[] { "vi", "viu", "vimos", "viram" }));
            t.addIrregularVerb(new IrregularVerb("vir", new string[] { "vim", "veio", "viemos", "vieram" }));

            // Conjugation.Imperfect
            e[0] = new Endings('a', new string[] { "ava", "ava", "ávmos", "avam" });
            e[1] = new Endings('e', new string[] { "ia", "ia", "íamos", "iam" });
            e[2] = new Endings('i', new string[] { "ia", "ia", "íamos", "iam" });
            t = new Tense(Conjugation.Imperfect, e);
            Tenses.Add(t);
            t.addIrregularVerb(new IrregularVerb("pôr", new string[] { "punha", "punha", "púnhamos", "punham" }));
            t.addIrregularVerb(new IrregularVerb("ser", new string[] { "era", "era", "éramos", "eram" }));
            t.addIrregularVerb(new IrregularVerb("ter", new string[] { "tinha", "tinha", "tínhamos", "tinham" }));
            t.addIrregularVerb(new IrregularVerb("vir", new string[] { "vinha", "vinha", "vinhamos", "vinham" }));

            // Conjugation.Future
            e[0] = new Endings('a', new string[] { "arei", "ará", "aremos", "arão" });
            e[1] = new Endings('e', new string[] { "erei", "erá", "eremos", "erão" });
            e[2] = new Endings('i', new string[] { "irei", "irá", "iremos", "irão" });
            t = new Tense(Conjugation.Future, e);
            Tenses.Add(t);
            t.addIrregularVerb(new IrregularVerb("fazer", new string[] { "farei", "fará", "faremos", "farão" }));
            t.addIrregularVerb(new IrregularVerb("fazer", new string[] { "trarei", "trará", "traremos", "trarão" }));

            // Conjugation.Conditional
            e[0] = new Endings('a', new string[] { "aria", "aria", "aríamos", "ariam" });
            e[1] = new Endings('e', new string[] { "eria", "eria", "eríamos", "eriam" });
            e[2] = new Endings('i', new string[] { "iria", "iria", "iríamos", "iriam" });
            t = new Tense(Conjugation.Conditional, e);
            Tenses.Add(t);
            t.addIrregularVerb(new IrregularVerb("dizer", new string[] { "diria", "diria", "diríamos", "diriam" }));
            t.addIrregularVerb(new IrregularVerb("fazer", new string[] { "faria", "faria", "faríamos", "fariam" }));
            t.addIrregularVerb(new IrregularVerb("fazer", new string[] { "traria", "traria", "traríamos", "trariam" }));
        }

        static void Main(string[] args)
        {
            if (args[0] != null)
            {
                // if directory and exists, set basedir
                basedir = args[0] + @"\";
            }

            Console.WriteLine(@"basedir = " + basedir);
            StaticConstructor();

            Random r = new Random();
            infinitives = readSeedData();

            //vocab.optionFlashCards();

            string infinitive;
            string conjugatedVerb;

            // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            Conjugation conjugation = Conjugation.Preterite;
            // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            Console.WriteLine(conjugation.ToString());
            
            PersonalPronoun pronoun = null;

            int index = -1;
             
            List<History> historyList = new List<History>(); 
                       
            while (infinitives.Count > 0)
            {
                do
                {
                    pronoun = getPersonalPronoun();
                    index = r.Next(0, infinitives.Count);
                } while (History.isInHistory(index, pronoun, historyList));

                History h = new History(index, pronoun);
                historyList.Add(h);
                if (historyList.Count > 20)
                    historyList.RemoveAt(0);

                infinitive = infinitives[index];
                
                //infinitives.RemoveAt(index);
                if (isIrregular(infinitive, conjugation))
                {
                    Console.WriteLine("Irregular: " + infinitive);
                }
                Console.WriteLine("verb: " + infinitive);
                Console.Write(pronoun + " ");
                Console.ReadLine();

                conjugatedVerb = conjugateVerb(infinitive, pronoun, conjugation);
                Console.WriteLine(pronoun + " " + conjugatedVerb);
                Console.WriteLine();

                bool showTables = false;
                if (showTables)
                {
                    PersonalPronoun pp;
                    pp = personalPronouns.getRandomPersonalPronoun(Person.firstPersonSingular);
                    Console.WriteLine(("").PadLeft(40) + pp.pronoun.PadRight(8) + conjugateVerb(infinitive, pp, conjugation));
                    pp = personalPronouns.getRandomPersonalPronoun(Person.thirdPersonSingular);
                    Console.WriteLine(("").PadLeft(40) + pp.pronoun.PadRight(8) + conjugateVerb(infinitive, pp, conjugation));
                    pp = personalPronouns.getRandomPersonalPronoun(Person.firstPersonPlural);
                    Console.WriteLine(("").PadLeft(40) + pp.pronoun.PadRight(8) + conjugateVerb(infinitive, pp, conjugation));
                    pp = personalPronouns.getRandomPersonalPronoun(Person.thirdPersonPlural);
                    Console.WriteLine(("").PadLeft(40) + pp.pronoun.PadRight(8) + conjugateVerb(infinitive, pp, conjugation));

                    Console.WriteLine();
                    foreach (Conjugation item in Enum.GetValues(typeof(Conjugation)))
                    {
                        Console.WriteLine(("").PadLeft(40) + (item.ToString() + ":").PadRight(15) + pronoun.pronoun + " " + conjugateVerb(infinitive, pronoun, item));
                    }
                }

#if (SENTENCES)
                int occurenceOffset;
                if (sentences == null)
                {
                    sentences = readSentences();
                }
                foreach (string sentence in sentences)
                {
                    occurenceOffset = sentence.IndexOf(conjugatedVerb);

                    if (occurenceOffset > 0)
                    {
                        string[] foundWords = sentence.Substring(occurenceOffset).Split(new char[4] { ' ', '.', '?', ',' });
                        string foundWord = foundWords[0]; // for the debugger
                        string[] wholeWords = sentence.Split(new char[4] { ' ', '.', '?', ',' });
                        foreach (string word in wholeWords)
                        {
                            if (word == conjugatedVerb)
                            {
                                Console.WriteLine(sentence + ".");
                                Console.WriteLine();
                            }
                        }

                    }
                }
#endif
                Console.WriteLine();
                Console.ReadLine();
            }
        }
    }
}
